0.编译安装QEMU
首先要硬件支持虚拟化，在x86和x86-64平台中，Intel系列CPU支持虚拟化的标志为“vmx”，AMD系列CPU的标志为“svm”。
grep -E "svm|vmx" /proc/cpuinfo
查看是否安装KVM
lsmod | grep kvm
安装SDL库
sudo apt-get install libsdl1.2-dev
编译QEMU
./configure --target-list=arm-softmmu,arm-linux-user --enable-debug
make
sudo make install

1.制作根文件系统：
cd busybox
export ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-
make menuconfig

busybox:
	Busybox Settings --->
		[*] Build Busybox as a static binary (no shared libs)

mkdir -p etc/init.d/ dev mnt		

vim _install/etc/init.d/rcS
-->
mkdir -p /proc
mkdir -p /tmp
mkdir -p /sys
mkdir -p /mnt
/bin/mount -a
mkdir -p /dev/pts
mount -t devpts devpts /dev/pts
echo /sbin/mdev > /proc/sys/kernel/hotplug
mdev -s

chmod a+x _install/etc/init.d/rcS

vim _install/etc/fstab
-->
proc /proc proc defaults 0 0
tmpfs /tmp tmpfs defaults 0 0
sysfs /sys sysfs defaults 0 0
tmpfs /dev tmpfs defaults 0 0
debugfs /sys/kernel/debug debugfs defaults 0 0

vim _install/etc/inittab
-->
::sysinit:/etc/init.d/rcS
::respawn:-/bin/sh
::askfirst:-/bin/sh
::ctrlaltdel:/bin/umount -a -r

cd _install/dev
sudo mknod console c 5 1
sudo mknod null c 1 3

2.编译内核
export ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-
make vexpress_defconfig
make menuconfig

kernel:
	配置initramfs
General setup --->
	[*] Initial RAM filesystem and RAM disk (initramfs/inird) support
		(_install) Initramfs source file(s)
Boot options -->
	()Default kernel command string
Kernel Features --->
	Memory split (3G/1G user/kernel split) --->
	[*] High Memory Support

make bzImage -j4 ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-
make dtbs

3.运行QEMU模拟4核Cortex-A9的Versatile Express开发平台
qemu-system-arm -M vexpress-a9 -smp 4 -m 512M -kernel arch/arm/boot/zImage -append "rdinit=/linuxrc console=ttyAMA0 loglevel=8" -dtb arch/arm/boot/dts/vexpress-v2p-ca9.dtb -nographic

4.使用gdb调试内核
安装ARM GDB工具
sudo apt-get install gdb-multiarch

编译的内核需要包含调试信息
Kernel hacking --->
Compile-time checks and compiler options --->
	[*] Compile the kernel with debug info

qemu-system-arm -nographic -M vexpress-a9 -smp 4 -m 1024M -kernel arch/arm/boot/zImage -append "rdinit=/linuxrc console=ttyAMA0 loglevel=8" -dtb arch/arm/boot/dts/vexpress-v2p-ca9.dtb -S -s
	-S：QEMU会冻结CPU，直至远程的GDB输入相应的控制命令
	-s：在1234端口接受GDB的调试连接
	
在另一个终端启动ARM GDB
cd linux-4.0
gdb-multiarch --tui vmlinux
(gdb) set architecture arm
(gdb) target remote localhost:1234
(gdb) b start_kernel	<= 在内核的start_kernel处设置断点
(gdb) c


5.创建硬盘镜像
创建一个32MB的image
dd if=/dev/zero of=swap.img bs=1M count=32
配置内核
		() Initramfs source file(s)
通过SD卡方式加载swap.img到QEMU
qemu-system-arm -nographic -M vexpress-a9 -m 512M -kernel arch/arm/boot/zImage -append "root=/dev/mmcblk0 rw console=ttyAMA0" -dtb arch/arm/boot/dts/vexpress-v2p-ca9.dtb -sd sd.img

创建一个ext4文件系统分区
dd if=/dev/zero of=ext4.img bs=512 count=131072
mkfs.ext4 ext4.img

挂载ext4文件系统需要打开如下配置选项
[arch/arm/configs/vexpress_defconfig]
CONFIG_LBDAF=y
CONFIG_EXT4_FS=y
重新编译内核，make vexpress_defconfig && make
qemu-system-arm -nographic -M vexpress-a9 -m 1024M -kernel arch/arm/boot/zImage -append "rdinit=/linuxrc console=ttyAMA0 loglevel=8" -dtb arch/arm/boot/dts/vexpress-v2p-ca9.dtb -sd ext4.img
...
mount -t ext4 /dev/mmcblk0 /mnt/	<=挂载SD卡到/mnt	
	
		
echo /bin/pwd > /proc/sys/kernel/myevent_handler
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	