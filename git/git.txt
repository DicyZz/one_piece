==========================================================================
				新建工程
==========================================================================
创建一个新仓库
git clone ssh://git@10.2.29.14:8085/zj_35b150/kernel_4.19.git
cd kernel_4.19
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master

推送现有文件夹
cd existing_folder
git init
git remote add origin ssh://git@10.2.29.14:8085/zj_35b150/kernel_4.19.git
git add .
git commit -m "Initial commit"
git push -u origin master

推送现有的 Git 仓库
cd existing_repo
git remote rename origin old-origin
git remote add origin ssh://git@10.2.29.14:8085/zj_35b150/kernel_4.19.git
git push -u origin --all
git push -u origin --tags


使用自定义的名称（origin可改变）在本地仓库中添加远程连接
git remote add origin git@gitlab.com:emmajane/my-git-for-teams.git

列出连接至你当前仓库的远程仓库
git remote -v 

删除远程库
git remote remove origin


==========================================================================
				上传
==========================================================================
git commit -s "xxx"					commit并编写声明
git commit --amend					如果commit注释写错了，只是想改一下注释，
							此时会进入默认vim编辑器，修改注释完毕后保存就好了
git log -p						查看commit具体内容

git push <远程主机名> <本地分支名>:<远程分支名>

git push -u origin master
-u参数可以在推送的同时，将origin 仓库的master 分支设置为本地仓库当前分支的upstream（上游）。添加了这个参数，将来运行git pull命令从远程仓库获取内容时，本地仓库的这个分支就可以直接从origin的master 分支获取内容，省去了另外添加参数的麻烦。

在上传本地分支时设置上游分支
git push --set-upstream origin 1-process_notes


==========================================================================
				下载
==========================================================================
git fetch <远程主机名> <远程分支名>:<本地分支名>

git fetch origin master:master				下载远程分支到本地master分支
git fetch origin					更新远端所有分支变更到本地

远程指定的分支与本地指定的分支相同，则可直接执行git fetch origin remote_branch

git pull <远程主机名> <远程分支名>:<本地分支名>

pull是两个无关步骤的组合：fetch和merge，或者fetch和rebase。
pull命令默认使用merge策略来更新本地分支，但是，通过添加--rebase参数，开发者可以选择通过rebase策略来更新自己的本地分支。
git pull --rebase origin master

git branch --set-upstream master origin/next
上面命令指定master分支追踪origin/next分支
--track
如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。


==========================================================================
				分支
==========================================================================
git branch -a						列出所有分支和远程分支
git rebase master					合并master分支到本分支
git rebase --continue					解决冲突后合并
git merge name						合并某分支到当前分支
git branch						查看分支
git branch name						创建分支
git checkout name					切换分支
git checkout –b name					创建+切换分支	
git branch –d name					删除分支

git checkout -b feature-D origin/feature-D
-b参数的后面是本地仓库中新建分支的名称。新建分支名称后面是获取来源的分支名称。例子中指定了origin/feature-D，就是说以名为origin 的仓库的feature-D分支为来源，在本地仓库中创建feature-D 分支。


==========================================================================
				回退&撤销
==========================================================================
git checkout -- <file>					丢弃工作区的修改
git reflog						查看销毁的版本号
git reset --hard 版本号					恢复相应版本
git reset --hard HEAD~n					回到前n个版本
git reset --hard HEAD^					回退到上一个版本
git revert HEAD						撤销已经推送到remote仓库的提交
git reset HEAD XXX.py 					就是对某个py文件进行撤销了
git reset HEAD 						如果后面什么都不跟的话 就是上一次add 里面的全部撤销了 

git reset --soft HEAD^
--mixed 
不删除工作空间改动代码，撤销commit，并且撤销git add . 操作这个为默认参数,git reset --mixed HEAD^ 和 git reset HEAD^ 效果是一样的。
--soft  
不删除工作空间改动代码，撤销commit，不撤销git add .
--hard
删除工作空间改动代码，注意完成这个操作后，就恢复到了上一次的commit状态。


==========================================================================
				临时分支处理
==========================================================================
git stash						储藏分支
git stash apply						恢复储藏内容，但不删除stash内容
git stash list						查看储藏内容
git stash drop						删除stash内容


==========================================================================
				patch处理
==========================================================================
git apply  xxx.patch            			打上patch
git apply --stat xxx.patch   　 			查看patch的情况
git apply --check xxx.patch   　			检查patch是否能够打上，如果没有任何输出，则说明无冲突，可以打上

git am xxx.patch					将名字为0001-limit-log-function.patch的patch打上
git am --signoff xxx.patch      			添加-s或者--signoff，还可以把自己的名字添加为signed off by信息，作用是注明打patch的人是谁
git am *.patch　　　　　       				批量打上patch，并且安装000x的序号先后打上patch,此处需要说明的每一个patch之间最好没有依赖关系，如果有依赖关系，可以修改000x序号# 把需要被依赖的patch先打上。
git am --abort                  			git patch过程中如果遇到的冲突怎么办,可以通过加上--abort指令撤回打的patch。     

git am 和 git apply，两者之间有什么区别呢？
两者之间的区别在于commit信息，前者只要打补丁成功，必定包括自带的commit的信息，当然你可以-s加上你本人的singed off信息。
而后者相当于修改了文件，并且执行了git add -u *之类的指令，但是不会生成commit信息，这个信息需要你本人自己添加，也就是说，该补丁最后生成的commit信息是自己需要构造的。

1、git am冲突后，可以先执行git apply --reject将不冲突的代码打入文件中。
2、按照xxx.rej的指示，手动修改冲突文件内容，修改完成后，删除xxx.rej文件。
3、执行git add .指令，将修改后的文件add进去。
4、执行git am --resolved即可将有冲突的补丁打成功，若此过程还是失败，再次执行1~4步骤即可。


==========================================================================
				其他
==========================================================================
git log --graph						以图表形式查看分支




