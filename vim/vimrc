" ctags set
set autochdir
set tags=tags;

" 保存时自动更新tags
" autocmd BufWritePost * call system("ctags -R")

"fr映射到ctrl+],这将中调用ctags的数据库跳转,在速度上会快一点. 如果发现fr无法实现跳转,可以试着使用fg, 这个会调用cscope的数据库实现跳转.
nmap fr <c-]>  
"ff映射到ctrl+t , 在使用fr跳转的使用通过ff跳转回来.
nmap ff <c-t> 

" cscope set
"s:查找即查找C语言符号出现的地方
nmap fs :cs find s <C-R>=expand("<cword>")<CR><CR>
"g:查找函数、宏、枚举等定义的位置
nmap fg :cs find g <C-R>=expand("<cword>")<CR><CR>
"c:查找光标下的函数被调用的地方
nmap fc :cs find c <C-R>=expand("<cword>")<CR><CR>
"t: 查找指定的字符串出现的地方
nmap ft :cs find t <C-R>=expand("<cword>")<CR><CR>
"e:egrep模式查找,相当于egrep功能
nmap fe :cs find e <C-R>=expand("<cword>")<CR><CR>
"f: 查找文件名,相当于lookupfile
nmap fn :cs find f <C-R>=expand("<cfile>")<CR><CR>
"i: 查找当前文件名出现过的地方
nmap fi :cs find i <C-R>=expand("<cfile>")<CR><CR>
"d: 查找本当前函数调用的函数
nmap fd :cs find d <C-R>=expand("<cword>")<CR><CR>

" cscspe添加成功时不在命令栏显示提示信息
set nocst

" autocscope set
" 最多向上查找7层
set cspc=7
" 关闭autocscope快捷键映射
let g:autocscope_menus=0

" taglist
nnoremap <silent> <F2> :TlistToggle<CR>
let Tlist_Ctags_Cmd = '/usr/bin/ctags' 
let Tlist_Show_One_File = 1 		"不同时显示多个文件的tag，只显示当前文件的
let Tlist_Use_Right_Window = 1 		"在右侧窗口中显示taglist窗口
let Tlist_Exit_OnlyWindow = 1 		"如果taglist窗口是最后一个窗口，则退出vim 

" nerdtree
map <F3> :NERDTreeMirror<CR>
map <F3> :NERDTreeToggle<CR>
" 设置树的显示图标
let g:NERDTreeDirArrowExpandable = '>'
let g:NERDTreeDirArrowCollapsible = '|'
" 不显示隐藏文件
let g:NERDTreeHidden=0    
" 定位到当前目录 
autocmd StdinReadPre * let s:std_in=1
let NERDTreeWinSize=25
let NERDTreeAutoCenter=1
let NERDTreeShowLineNumbers=0

" 主页面退出关闭nerdtree和taglist
autocmd BufEnter * if 0 == len(filter(range(1, winnr('$')), 'empty(getbufvar(winbufnr(v:val), "&bt"))')) | qa! | endif

" My select
nmap qq :q!
nmap ww :wq
"复制到系统剪切版，visual模式下使用
vmap Y "+y
"从系统剪切版粘贴
nmap P "+p

set autoindent 	 	"自动缩进
set cindent			"C语言自动缩进
set smartindent 	"为新行添加同上行的缩进
set tabstop=4 		"tab键长度
set shiftwidth=4  	"缩进宽度
set incsearch  		"搜索时输入时进行匹配
set hls				"搜索时高亮显示
set mouse= 			"鼠标
set nu				"行号
set scrolloff=3 	"上下可视行数
set ignorecase smartcase "搜索时默认不区分大小写，只有搜索关键字中出现一个大字母时才区分大小写

"autocmd VimEnter * NERDTree | wincmd p

"vim自动打开跳到上次的光标位置
if has("autocmd")
        au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" 解决插入模式下delete/backspce键失效问题
set backspace=2

"---------------------------------------------------------------------------------------

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
"Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
"Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
"Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
"Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
"Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-default branch
"Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
"Plug 'fatih/vim-go', { 'tag': '*' }

" Plugin options
"Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

" Plugin outside ~/.vim/plugged with post-update hook
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Unmanaged plugin (manually installed and updated)
"Plug '~/my-prototype-plugin'

" My vim list
"Plug 'w0rp/ale'
"Plug 'skywind3000/asyncrun.vim'
"Plug 'Valloric/YouCompleteMe'

" Initialize plugin system
call plug#end()

