"---------------------------------------------------------------------------------
" basic config 
syntax on						" 语法高亮
set autoindent					" 自动缩进
set cindent						" C语言自动缩进
set smartindent					" 为新行添加同上行的缩进
filetype on						" 开启文件类型侦测
filetype plugin on				" Enable plugins and load plugin for the detected file type
filetype indent on				" Load an indent file for the detected file type
set tabstop=4					" tab键长度
set shiftwidth=2				" 缩进宽度
set expandtab					" Use space characters instead of tabs
set incsearch					" 搜索时输入时进行匹配
set hls							" 搜索时高亮显示
set mouse=a						" 鼠标
set nu							" 行号
set scrolloff=2					" 上下可视行数
set ignorecase smartcase		" 搜索时默认不区分大小写，只有搜索关键字中出现一个大字母时才区分大小写
set nobackup					" Do not save backup files
set wildmenu                    " Enable auto completion menu after pressing TAB
set wildmode=list:longest       " Make wildmenu behave like similar to Bash completion

" Wildmenu will ignore files with these extensions
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx 

"复制到系统剪切版，visual模式下使用
vmap Y "+y
"从系统剪切版粘贴
nmap P "+p

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

"vim自动打开跳到上次的光标位置
if has("autocmd")
        au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" 主页面退出关闭nerdtree和taglist
autocmd BufEnter * if 0 == len(filter(range(1, winnr('$')), 'empty(getbufvar(winbufnr(v:val), "&bt"))')) | qa! | endif

"----------------------------------------------------------------------------------
" ctags set
set autochdir
set tags=tags;

"fr映射到ctrl+],这将中调用ctags的数据库跳转,在速度上会快一点. 如果发现fr无法实现跳转,可以试着使用fg, 这个会调用cscope的数据库实现跳转.
nmap fr <c-]>
"ff映射到ctrl+t , 在使用fr跳转的使用通过ff跳转回来.
nmap ff <c-t>

"---------------------------------------------------------------------------------
" cscope set
"s:查找即查找C语言符号出现的地方
nmap fs :cs find s <C-R>=expand("<cword>")<CR><CR>
"g:查找函数、宏、枚举等定义的位置
nmap fg :cs find g <C-R>=expand("<cword>")<CR><CR>
"c:查找光标下的函数被调用的地方
nmap fc :cs find c <C-R>=expand("<cword>")<CR><CR>
"t: 查找指定的字符串出现的地方
nmap ft :cs find t <C-R>=expand("<cword>")<CR><CR>
"e:egrep模式查找,相当于egrep功能
nmap fe :cs find e <C-R>=expand("<cword>")<CR><CR>
"f: 查找文件名,相当于lookupfile
nmap fn :cs find f <C-R>=expand("<cfile>")<CR><CR>
"i: 查找当前文件名出现过的地方
nmap fi :cs find i <C-R>=expand("<cfile>")<CR><CR>
"d: 查找本当前函数调用的函数
nmap fd :cs find d <C-R>=expand("<cword>")<CR><CR>

" cscspe添加成功时不在命令栏显示提示信息
set nocst

" autocscope set
" 最多向上查找7层
set cspc=7
" 关闭autocscope快捷键映射
let g:autocscope_menus=0

"---------------------------------------------------------------------------------
" taglist
" nnoremap <silent> <F3> :TlistToggle<CR>
" let Tlist_Ctags_Cmd = '/usr/bin/ctags' 
" 不同时显示多个文件的tag，只显示当前文件的
" let Tlist_Show_One_File = 1 		
" 在右侧窗口中显示taglist窗口
" let Tlist_Use_Right_Window = 1 		
" 如果taglist窗口是最后一个窗口，则退出vim 
" let Tlist_Exit_OnlyWindow = 1 		

" 启动时自动focus
let g:tagbar_autofocus=0
" <F3>打开/关闭Tagbar
nnoremap <silent> <F3> :TagbarToggle<CR>

"---------------------------------------------------------------------------------
" nerdtree
map <F2> :NERDTreeMirror<CR>
map <F2> :NERDTreeToggle<CR>
" 设置树的显示图标
let g:NERDTreeDirArrowExpandable = '>'
let g:NERDTreeDirArrowCollapsible = '|'
" 不显示隐藏文件
let g:NERDTreeHidden=0    
" 定位到当前目录 
autocmd StdinReadPre * let s:std_in=1
let NERDTreeWinSize=40
let NERDTreeAutoCenter=1
let NERDTreeShowLineNumbers=0

" Have nerdtree ignore certain files and directories.
let NERDTreeIgnore=['\.git$', '\.jpg$', '\.mp4$', '\.ogg$', '\.iso$', '\.pdf$', '\.pyc$', '\.odt$', '\.png$', '\.gif$', '\.db$']

"---------------------------------------------------------------------------------
" PLUGINS ---------------------------------------------------------------- {{{
call plug#begin('~/.vim/plugged')

  Plug 'preservim/nerdtree'

  Plug 'preservim/tagbar'

  Plug 'tpope/vim-fugitive'

  Plug 'vim-airline/vim-airline'

  Plug 'kien/ctrlp.vim'

  Plug 'scrooloose/syntastic'

call plug#end()

" }}}

"---------------------------------------------------------------------------------
" MAPPINGS --------------------------------------------------------------- {{{

" Press \\ to jump back to the last cursor position.
nnoremap <leader>\ ``

" Press \p to print the current file to the default printer from a Linux operating system.
" View available printers:   lpstat -v
" Set default printer:       lpoptions -d <printer_name>
" <silent> means do not display output.
nnoremap <silent> <leader>p :%w !lp<CR>

" Type jj to exit insert mode quickly.
inoremap jj <Esc>

" Press the space bar to type the : character in command mode.
nnoremap <space> :

" Pressing the letter o will open a new line below the current one.
" Exit insert mode after creating a new line above or below the current line.
nnoremap o o<esc>
nnoremap O O<esc>

" Center the cursor vertically when moving to the next word during a search.
nnoremap n nzz
nnoremap N Nzz

" Map the F5 key to run a Python script inside Vim.
" I map F5 to a chain of commands here.
" :w saves the file.
" <CR> (carriage return) is like pressing the enter key.
" !clear runs the external clear screen command.  " !python3 % executes the current file with Python.
nnoremap <f5> :w <CR>:!clear <CR>:!python3 % <CR>

" You can split the window in Vim by typing :split or :vsplit.
" Navigate the split view easier by pressing CTRL+j, CTRL+k, CTRL+h, or CTRL+l.
nnoremap <c-j> 5j
nnoremap <c-k> 5k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Resize split windows using arrow keys by pressing:
" CTRL+UP, CTRL+DOWN, CTRL+LEFT, or CTRL+RIGHT.
noremap <c-up> <c-w>+
noremap <c-down> <c-w>-
noremap <c-left> <c-w>>
noremap <c-right> <c-w><

" }}}

"---------------------------------------------------------------------------------
" STATUS LINE ------------------------------------------------------------ {{{

" Clear status line when vimrc is reloaded.
set statusline=

" Status line left side.
set statusline+=\ %F\ %M\ %Y\ %R

" Use a divider to separate the left side from the right side.
set statusline+=%=

" Status line right side.
set statusline+=\ ascii:\ %b\ hex:\ 0x%B\ row:\ %l\ col:\ %c\ percent:\ %p%%

" Show the status on the second to last line.
set laststatus=2

" }}}

"---------------------------------------------------------------------------------
" syntax 
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1



