如果规则的命令行以字符“@”开始，则make在执行这个命令时就不会回显这个将要被执行的命令

如果使用make的命令行参数“-n”或“--just-print”，那么make执行时只显示所要执行的命令，但不会真正的去执行这些命令，这种情况下make会打印出所有make需要执行的命令，其中也包括了使用“@”字符开始的命令

书写在同一行中的多个命令属于一个完整的shell命令行，书写在独立行的一条命令是一个独立的shell命令行

“.PHONY”特殊目标将“clean”目标声明为伪目标。避免当磁盘上存在一个名为“clean”文件时，目标“clean”所在规则的命令无法执行

在命令行之前使用“-”，意思是忽略命令“rm”的执行错误

make的“-f”或者“--file”选项来指定make读取的makefile文件，给make指定makefile文件的格式为：“-f NAME”或者“—file=NAME”，它指定文件“NAME”作为执行make时读取的makefile文件。也可以通过多个“-f”或者“--file”选项来指定多个需要读取的makefile文件，多个makefile文件将会被按照指定的顺序进行链接并被make解析执行。当通过“-f”或者“--file”指定make读取makefile的文件时，make就不再自动查找这三个标准命名的makefile文件。

“include”指示符告诉make暂停读取当前的Makefile，而转去读取“include”指定的一个或者多个文件，完成以后再继续当前Makefile的读取。指示符“include”和文件名之间、多个文件之间使用空格或者[Tab]键隔开，Makefile中指示符“include”书写在独立的一行，其形式如下：
include FILENAMES...
FILENAMES是shell所支持的文件名（可以使用通配符）。

如果使用一个没有依赖只有命令行的双冒号规则去更新一个文件，那么每次执行make时，此规则的目标文件将会被无条件的更新（此规则定义的命令会被无条件执行）

定义变量“VPATH”时，使用空格或者冒号（:）将多个需要搜索的目录分开。make搜索目录的顺序是按照变量“VPATH”定义中的目录顺序进行的（当前目录永远是第一搜索目录）。例如对变量的定义如下：
VPATH = src:../headers
这样我们就为所有规则的依赖指定了两个搜索目录，“src”和“../headers”

vpath PATTERN DIRECTORIES
为所有符合模式“PATTERN”的文件指定搜索目录“DIRECTORIES”。多个目录使用空格或者冒号（：）分开。
vpath PATTERN
清除之前为符合模式“PATTERN”的文件设置的搜索路径。
vpath
清除所有已被设置的文件搜索路径。

$@			表示规则的目标文件名
$%			当规则的目标文件是一个静态库文件时，代表静态库的一个成员名
$<			规则的第一个依赖文件名
$?			所有比目标文件更新的依赖文件列表，空格分割
$^			规则的所有依赖文件列表，使用空格分隔
$+			类似“$^”，但是它保留了依赖文件中重复出现的文件
$*			在模式规则和静态模式规则中，代表“茎”。“茎”是目标模式中“%”所代表的部分

“直接展开”式，这种风格的变量使用“:=”定义。在使用“:=”定义变量时，变量值中对其他量或者函数的引用在定义变量时被展开（对变量进行替换）。
还有一个被称为条件赋值的赋值操作符“?=”。被称为条件赋值是因为：只有此变量在之前没有赋值的情况下才会对这个变量进行赋值
Makefile中变量的设置（也可以称之为定义）是通过“=”（递归方式）或者“:=”（静态方式）来实现的。“=”和“:=”左边的是变量名，右边是变量的值。下边就是一个变量的定义语句：
objects = main.o foo.o bar.o utils.o
使用“=”定义的变量称之为“递归展开”式变量；使用“:=”定义的变量称为“直接展开”式变量，“直接展开”式的变量如果其值中存其他变量或者函数的引用，在定义时这些引用将会被替换展开
我们可以在定义时（也可以不定义而直接追加）给它赋一个基本值，后续根据需要可随时对它的值进行追加（增加它的值）。在Makefile中使用“+=”（追加方式）来实现对一个变量值的追加操作：
1.如果被追加值的变量之前没有定义，那么，“+=”会自动变成“=”，此变量就被定义为一个递归展开式的变量。如果之前存在这个变量定义，那么“+=”就继承之前定义时的变量风格
2.直接展开式变量的追加过程：变量使用“:=”定义，之后“+=”操作将会首先替换展开之前此变量的值，尔后在末尾添加需要追加的值，并使用“:=”重新给此变量赋值。
3.递归展开式变量的追加过程：一个变量使用“=”定义，之后“+=”操作时不对之前此变量值中的任何引用进行替换展开，而是按照文本的扩展方式（之前等号右边的文本未发生变化）替换，尔后在末尾添加需要追加的值，并使用“=”给此变量重新赋值。


